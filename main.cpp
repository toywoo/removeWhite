//#include <opencv2/imgcodecs.hpp>
//#include <opencv2/videoio.hpp>
//#include <opencv2/highgui.hpp>
//#include <opencv2/imgproc.hpp>
//
//#include <iostream>
//#include <stdio.h>
//#include <string>
//
//using namespace cv;
//using namespace std;
//
//int main(int ac, char** av) {
//	Mat img, target_img, rev_img, gray_img, otsu_img;
//	vector<vector<Point>> contours;
//	
//	
//	img = imread("5.jpg");
//	img.copyTo(target_img);
//
//	cvtColor(target_img, gray_img, COLOR_BGR2GRAY);
//	bitwise_not(target_img, rev_img);
//
//	threshold(gray_img, otsu_img, -1, 255, THRESH_BINARY | THRESH_OTSU);
//	findContours(otsu_img, contours, RETR_LIST, CHAIN_APPROX_NONE);
//
//	vector<vector<Point>> conPoly(contours.size());
//	for (int i = 0; i < contours.size(); i++) {
//		approxPolyDP(contours[i], conPoly[i], arcLength(contours[i], true) * 0.02, true);
//		Rect rect = boundingRect(contours[i]);
//
//		if (rect.width > 180 && rect.height > 180 && img.size().width != rect.width) {
//			Mat temp = img(rect);
//			Mat rev_ROI = rev_img(rect);
//
//			temp.copyTo(rev_ROI, temp);
//		}
//	}
//	
//	imwrite("rev.png", rev_img);
//
//	return 0;
//}

//int main() {
//	vector<unsigned char> dst = { 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,25,0,0,0,25,8,3,0,0,0,243,55,117,81,0,0,0,144,80,76,84,69,0,0,0,61,55,41,87,71,39,136,110,62,172,131,68,111,97,64,163,137,79,185,169,111,176,160,114,187,172,122,192,177,122,197,185,138,217,211,179,246,246,232,242,242,227,251,250,235,247,244,212,252,251,227,232,216,164,207,193,153,196,181,134,195,177,118,191,170,106,180,165,115,193,182,119,186,168,117,212,202,148,221,211,167,230,217,188,207,196,155,201,185,147,57,44,22,104,65,22,106,89,53,139,126,91,171,103,31,253,245,204,252,240,184,243,230,181,239,222,176,243,219,160,251,226,163,234,210,150,221,191,138,206,182,121,201,156,101,22,17,8,0,0,0,41,103,112,73,0,0,0,31,116,82,78,83,0,222,254,253,252,207,186,164,147,107,72,13,32,61,86,126,214,250,254,254,252,253,254,253,224,210,202,221,238,174,129,43,246,221,62,0,0,1,58,73,68,65,84,120,218,141,146,141,110,131,32,16,128,55,193,214,191,182,78,69,106,187,74,177,138,22,16,222,255,237,118,216,50,155,37,77,246,249,3,185,143,203,93,128,143,55,164,238,139,218,236,79,56,139,54,33,12,45,198,231,125,250,186,60,198,8,109,96,108,48,198,223,135,53,109,119,193,156,49,148,130,185,221,240,12,106,119,0,118,217,254,132,3,102,76,184,152,43,194,115,158,127,45,228,185,70,204,90,235,234,108,111,236,138,213,216,247,15,53,140,196,153,13,152,24,153,235,44,250,167,233,135,97,66,214,6,45,152,140,34,34,7,136,12,66,8,248,247,189,228,188,89,154,109,137,18,3,60,192,4,66,136,177,44,33,197,113,41,38,64,22,133,148,114,26,29,222,100,103,169,58,68,165,211,186,235,202,162,240,38,61,105,104,135,131,185,43,110,45,163,101,153,60,205,17,65,159,72,222,239,131,10,96,198,171,42,251,53,198,26,61,65,142,196,96,186,242,226,183,176,33,24,205,74,41,13,47,230,29,173,146,143,39,9,33,68,43,26,24,94,149,21,165,164,73,189,73,183,164,214,154,45,37,52,213,36,121,57,170,99,77,168,5,12,37,53,137,94,79,43,57,214,157,117,116,180,222,250,160,87,232,97,124,198,74,76,25,8,214,172,53,86,162,240,51,140,211,119,87,233,95,252,0,17,171,41,5,68,128,24,127,0,0,0,0,73,69,78,68,174,66,96,130 };
//	Mat mat;
//	mat = imdecode(dst, IMREAD_COLOR);
//
//	imshow("t", mat);
//
//	waitKey(0);
//	destroyWindow("t");
//
//	return 0;
//}